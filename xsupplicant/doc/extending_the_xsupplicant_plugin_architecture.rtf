{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf270
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red14\green14\blue255;
\red100\green56\blue32;\red196\green26\blue22;\red28\green0\blue207;}
\margl1440\margr1440\vieww18100\viewh17580\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\b\fs24 \cf0 Extending the XSupplicant engine plugin architecture\
\
\pard\pardeftab720\ql\qnatural
\cf0 Purpose:\

\b0 \
This document's purpose is to describe how to add new plugin hooks to the XSupplicant engine.\
\
The XSupplicant engine plugin architecture consists of a couple of platform-specific plugin files (for loading OS-specific dynamic libraries) and a thin abstraction layer to simplify these OS-specific details into a unified API interface.\
\

\b Architecture:
\b0 \
\
The abstract API (required platform-specific calls) are defined in xsupplicant/src/platform/plugin_handler.h\
\
Each of the below calls is required for any new platforms that need to support plugins:\
\
void *platform_plugin_entrypoint(struct config_plugins *plugin, char *function_name);\
uint8_t platform_plugin_load(struct config_plugins *plugin);\
uint8_t platform_plugin_unload(struct config_plugins *plugin);\
char *platform_plugin_error(struct config_plugins *plugin);\
\
Plugin hooks currently exist for the following platforms:\
\
Windows (xsupplicant/src/platform/windows/plugin_handler_windows.c)\
Mac OS X (xsupplicant/src/platform/macosx/plugin_handler_macosx.c)\
Linux (xsupplicant/src/platform/linux/plugin_handler_linux.c)\
\
New architectures will need to define the above mentioned APIs and properly return codes defined in xsupplicant/src/plugins.h\
\
// XXX: Describe each of the plugin calls in detail\
\

\b Adding a Plugin Hook:\
\
\pard\pardeftab720\ql\qnatural

\i \cf0 Step 1:
\i0\b0   Determine where your particular hook(s) will need to be called from.\
\
For instance, if you wanted to write a plugin hook to capture send and receive frames, you would need to locate the particular places in the code that frame transmission/reception are dealt with.  Try to add the calls in at the most OS-generic level possible.  If there isn't a generic entrypoint that will allow you to be OS-agnostic, consider adding that functionality as well.  It will help keep us all sane as the project is ported to future platforms.\
\

\i\b Step 2: 
\i0\b0  Implement the hook(s) that your plugin will rely on.  \
\
Pick a sane name, but please stick to the naming conventions already set forth to help with readability.  If you don't like the current naming schema please suggest a new format and we'll consider it.\
\
Hooks are located in xsupplicant/src/plugins.c.  Declarations for your new hook(s) should be added to xsupplicant/src/plugins.h.  There should be a 1:1 correlation between hook driver 
\i names
\i0  in the engine and the calls in a plugin.  Prototypes need not necessarily match as multiple plugins may be called and so the return value from the engine hook will arbitrarily be defined by the particular use of your hook (status codes for the caller, etc), but it's probably a good idea to have your passing parameters match if possible.\
\
So let's say that the xsupplicant/src/foobar.c file calls a hook driver called plugin_hook_do_something_magic(), which is defined in xsupplicant/src/plugins.c.  In this scenario, the plugin_hook_do_something_magic() function is responsible for iterating the plugin cache and attempting to extract the plugin_hook_do_something_magic() call from the platform DLL.  It might look something like this:\
\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural

\f1\fs20 \cf2 \CocoaLigature0 // xsupplicant/src/plugins.c\cf0 \
\
\cf2 // Note: This function's parameters match the hook it is calling.\cf0 \
\cf2 // The key thing to remember is that both the passing parameters (float someparam) and the \cf0 \
\cf2 // return value (void) are completely up to you and dictated by the needs of your particular hook.\cf0 \
\cf2 // It is STRONGLY encouraged to match your plugin hook names to the calls in the actual plugins.\cf0 \
\cf3 void\cf0  plugin_hook_do_something_magic(\cf3 float\cf0  someparam) \{\
	\
	\cf2 // conf_plugins is the master plugin structure.\cf0 \
	\cf3 struct\cf0  config_plugins *plugin = conf_plugins;\
	\
	\cf2 // The hook in the plugin.  Note our prototype above matches this.\cf0 \
	\cf3 double\cf0  (*hook)(\cf3 float\cf0  theparam) = \cf3 NULL\cf0 ;\
	\
	\cf3 while\cf0 (plugin != \cf3 NULL\cf0 ) \{\
		\
		\cf2 // Note that I'm using __FUNCTION__ here, but you could just as easily use\cf0 \
		\cf2 // the bare string "plugin_hook_do_something_magic"\cf0 \
		\cf2 // returns NULL if the entrypoint isn't found.\cf0 \
		hook = (\cf3 void\cf0  *)platform_plugin_entrypoint(plugin, (char *)__FUNCTION__);\
		\
		\cf3 if\cf0 (hook != \cf3 NULL\cf0 ) \{\
			\cf2 // Note that hook would return a double here.  Do whatever you need with the return code.\cf0 \
			hook(someparam);\
		\}\
		\
		plugin = plugin->next;\
	\}\
\}\
\
You will also be required to implement the following hooks in your plugin:\
\
void initialize();\
void cleanup();\
\
These calls are called when the plugin is loaded and unloaded, respectively.  Do any plugin-specific initialization/cleanup in these functions.\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \CocoaLigature1 \
As of this writing, XSupplicant has plugin hooks to do the following:\
\
Instruct a plugin to dump diagnostic data to a specified file:\
	int plugin_hook_trouble_ticket_dump_file(char *path);\
\

\b Note:
\b0  Any plugin implementing this hook should write its log data to the file named by the "path" variable.  This file will be included in trouble ticket dumps.  \
\
\
Pass debug log information (including lines that would not normally be printed) to a plugin:\
	int plugin_hook_full_debug_log(char *msg);\
\
\pard\pardeftab720\ql\qnatural

\i\b \cf0 Step 3: 
\i0\b0 Write your plugin to implement the hooks in question.\
\
Plugins can implement multiple entry points if needed.  It is strongly encouraged to at least implement plugin_hook_trouble_ticket_dump_file so that your plugin can dump diagnostic information about its state when a trouble ticket is created.\
\
\
Here is some plugin boilerplate that should help you stay cross-platform:\
\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural

\f1\fs20 \cf2 \CocoaLigature0 /**                                                                                                                                                                                                                                                                                                                                                        \
 *                                                                                                                                                                                             \
 * Licensed under the dual GPL/BSD license.  (See LICENSE file for more info.)                                                                                                                 \
 *                                                                                                                                                                                             \
 * \\file boilerplate.c                                                                                                                                                                             \
 *                                                                                                                                                                                             \
 * \\author {\field{\*\fldinst{HYPERLINK "mailto:terry@open1x.org"}}{\fldrslt \cf4 terry@open1x.org}}                                                                                                                                                   \
 *                                                                                                                                                                                             \
 **/\cf0 \
\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 #include \cf6 <stdio.h>\cf5 \
#include \cf6 <string.h>\cf5 \
#include \cf6 <stdlib.h>\cf5 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
\cf2 // Your Windows build project needs to define _DLL and WIN32\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 #ifdef WIN32\
#include \cf6 <windows.h>\cf5 \
#include \cf6 <stdintwin.h>\cf5 \
#ifdef _DLL\
#define DLLMAGIC __declspec(dllexport)\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
\cf2 //typedef strdup _strdup;                                                                                                                                                                      \cf0 \
\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 #else\
#define DLLMAGIC __declspec(dllimport)\
#endif  \cf2 // _DLL                                                                                                                                                                                \cf5 \
#endif \cf2 // WIN32                                                                                                                                                                                \cf5 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 #ifndef WIN32  \cf2 // Non-Windows platforms need a stub                                                                                                                                            \cf5 \
#include \cf6 <stdint.h>\cf5 \
#define DLLMAGIC\
#endif \cf2 //WIN32         \cf5 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 \
                              \
\cf3 void\cf0  DLLMAGIC initialize() \{\
	\cf2 // Do your initialization here.\cf0 \
	\cf2 // This is a required hook and is called when your plugin is loaded.\cf0 \
\}\
\
\cf3 void\cf0  DLLMAGIC cleanup() \{\
	\cf2 // Do your cleanup here.\cf0 \
	\cf2 // This is a required hook and is called when your plugin is unloaded.\cf0 \
\}\
\
\cf3 double\cf0  DLLMAGIC plugin_hook_do_something_magic(\cf3 int\cf0  someparam) \{\
	\cf2 // This is your plugin hook and is called by the hook driver with the same\cf0 \
	\cf2 // name defined in xsupplicant/src/plugins.c\cf0 \
\}\
\
\cf2 // Windows required boilerplate.\cf0 \
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 #ifdef WIN32\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf0 BOOL WINAPI DllMain(\
  HANDLE hinstDLL,\
  DWORD dwReason,\
  LPVOID lpvReserved\
)\
\{\
 	\cf3 return\cf0  \cf7 1\cf0 ;\
\}\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural
\cf5 #endif \cf2 // WIN32\cf5 \
\
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \CocoaLigature1 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Compiling:\
\

\b0 Mac OS X:\
\
gcc -bundle -o SomethingMagic.bundle SomethingMagic.c\
\
Linux:\
\
gcc -shared -o SomethingMagic.so SomethingMagic.c\
\
Windows:\
\
Create a Visual Studio project, define _DLL and WIN32, set project type to DLL, build.
\b \
\
Configuration:
\b0 \
\
Plugins can be loaded by adding a <Plugins> block to your configuration such as the following:\
\
<Plugins>\
  <Plugin>\
    <Name>BirdDog</Name>\
    <Path>/usr/share/xsupplicant/plugins/birddog.so</Path>\
  </Plugin>\
</Plugins>\
\
Note that this is subject to change.  It would make a lot more sense to define static load points and determine file extensions on a per-platform basis to make the code OS-generic.  For now this should allow developers to add their own plugins easily for testing purposes.\
}