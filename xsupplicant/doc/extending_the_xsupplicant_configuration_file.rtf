{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf270
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13040\viewh15020\viewkind0
\deftab720
\pard\pardeftab720\qc

\f0\b\fs24 \cf0 Adding configuration options to XSupplicant.\
\
\pard\pardeftab720
\cf0 Purpose:\

\b0 \
This document's purpose is to describe how to add new configuration options to XSupplicant.\
\
XSupplicant has facilities to both read in configuration options, as well as write them out to the configuration file.  It is recommended that authors of new configuration file options implement both the ability to read the new options out of the configuration file, and the ability to write the options back into the configuration file, even if you do not plan to expose UI components for your options; someone else might wish to do so.\
\
Description:\
\
This document will explain how to add the following configuration options to the configuration file:\
\
<Plugins>\
  <Plugin>\
    <Name>BirdDog</Name>\
    <Path>/usr/share/xsupplicant/plugins/birddog.so</Path>\
  </Plugin>\
</Plugins>\
\
\pard\pardeftab720\ql\qnatural
\cf0 Depending on what you are trying to implement, you may need to plug your new configuration structures into existing code, or create entirely new structures and glue them in where appropriate, but that discussion is beyond the scope of this document.\
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Configuration File Reading:\

\b0 \
Take a look at the following files for reading:\
\
xsupplicant/lib/libxsupconfig/xsupconfig_structs.h\
xsupplicant/lib/libxsupconfig/xsupconfig_vars.h\
xsupplicant/lib/libxsupconfig/xsupconfig.c\
xsupplicant/lib/libxsupconfig/xsupconfig_defaults.c\
xsupplicant/lib/libxsupconfig/xsupconfig_parse.c\
\
You'll also need to create a file for parsing your configuration object.\
\
xsupplicant/lib/libxsupconfig/xsupconfig_parse_plugin.c, for instance.\
\
First, let's add the configuration structure to xsupconfig_structs.h:\
\
struct config_plugins \{\
  struct config_plugins *next;\
  char *name;\
  char *path;\
  void *handle;\
\};\
\
And the glue to xsupconfig_vars.h:\
\
struct config_plugins         *conf_plugins;\
\
lib/libxsupconfig/xsupconfig_vars.h\
\
typedef struct config_plugins config_plugins;\
\
Add the code to xsupconfig_defaults.c to create a default structure for your configuration options:\
\
/**                                                                                                       \
 * \\brief Create a plugin structure and populate it with it's default values.                             \
 *                                                                                                        \
 * @param[in,out] newplugin   A double dereferenced pointer that will be populated with                   \
 *                         a config_plugin structure that has all it's values set                         \
 *                         to defaults.                                                                   \
 *                                                                                                        \
 * \\retval DEFAULTS_SUCCESS on success                                                                    \
 * \\retval DEFAULTS_MALLOC_ERR on failure                                                                 \
 **/\
int xsupconfig_defaults_create_plugin(config_plugins **newplugin)\
\{\
  (*newplugin) = malloc(sizeof(struct config_plugins));\
  if ((*newplugin) == NULL)\
  \{\
          printf("Couldn't allocate memory to store plugin!\\n");\
          return DEFAULTS_MALLOC_ERR;\
  \}\
\
  memset((*newplugin), 0x00, sizeof(struct config_plugins));\
\
  return DEFAULTS_SUCCESS;\
\}\
\

\b Implement configuration-specific parsing files.\

\b0 \
For this example we'll be implementing 4 plugin-specific files:\
\
xsupconfig_parse_plugins.h\
xsupconfig_parse_plugins.c\
xsupconfig_parse_plugin.h\
xsupconfig_parse_plugin.c\
\
See Appendix A for full source.\
\
Once you've created your parser routines, you need to glue them into the appropriate location.  If you're piggy-backing off of an existing data structure, you will need to modify the appropriate file's parser.\
\
The main parser exists in xsupconfig_parse.c, and each subsequent child parser recursively handles its own children.  The <Plugins> configuration block is stand-alone, and as such we'll add it to the global parser located in xsupconfig_parse.c, but this won't always be the case:\
\
parser global_and_network[] = \{\
  \{"Globals",  (struct conf_parse_struct *)&globals, TRUE,\
   &xsupconfig_parse_build_globals\},\
  \{"Profiles", (struct conf_parse_struct *)&profiles, TRUE,\
   &xsupconfig_parse_profiles\},\
  \{"Connections", (struct conf_parse_struct *)&connections, TRUE,\
        xsupconfig_parse_connections\},\
  \{"Devices", (struct conf_parse_struct *)&devices, TRUE,\
   &xsupconfig_parse_devices\},\
  \{"Trusted_Servers", (struct conf_parse_struct *)&trusted_servers, TRUE,\
  &xsupconfig_parse_trusted_servers\},\
  \{"Managed_Networks", (struct conf_parse_struct *)&managed_networks, TRUE,\
  &xsupconfig_parse_managed_networks\},\

\i\b   \{"Plugins", (struct conf_parse_struct *)&plugins, TRUE,\
  &xsupconfig_parse_plugins\},
\i0\b0 \
  \{NULL, NULL, FALSE, NULL\}\};\
\
That should be enough to allow XSupplicant to read the new configuration options, but you'll probably want to use the configuration parser (config-parser) located in xsupplicant/tools/config-parser to validate that your configuration is parsing correctly. \
\
First, add the code to xsupconfig.c to dump the configuration options:\
\
Create a configuration dumping function for your new config options:\
\
/**                                                                                                       \
 * \\brief Dump to the screen, all of the information we know from the                                     \
 *        <Plugins> section of the configuration file.                                                    \
 *                                                                                                        \
 * @param[in] data   A pointer to the root of a linked list containing all                                \
 *                   of the plugins defined in the configuration file.                                    \
 **/\
void dump_config_plugins(struct config_plugins *data)\
\{\
        struct config_plugins *cur = data;\
\
        printf("+-+-+-+-+-+ Plugins -+-+-+-+-+\\n");\
        while (cur != NULL)\
        \{\
                printf("   ************ Plugin *************\\n");\
                printf("    Name     : %s\\n", cur->name);\
                printf("    Path     : %s\\n", cur->path);\
                printf("   **********************************\\n");\
\
                cur = cur->next;\
        \}\
        printf("+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n");\
\}\
\
Add a call for your dump function to dump_config_data():\
\
/**                                                                                                       \
 * \\brief Dump to the screen, all of the information that                                                 \
 *        was read in from the configuration file.                                                        \
 **/\
void dump_config_data()\
\{\
  printf("=-=-=-=-=-=-=-=-=-=-=-=-=\\n");\
  printf("Configuration File: %s\\n", config_fname);\
  dump_config_globals(conf_globals);\
  dump_config_profiles(conf_profiles);\
  dump_config_connections(conf_connections);\
  dump_config_devices(conf_devices);\
  dump_config_trusted_servers(conf_trusted_servers);\
  dump_config_managed_networks(conf_managed_networks);\

\b   dump_config_plugins(conf_plugins);\

\b0   printf("=-=-=-=-=-=-=-=-=-=-=-=-=\\n");\
\}\
\
Now you can test your configuration:\
\
WankleBook:config-parser terry$ ./config-parser -v -f ../../etc/plugins-example.conf\
Dumping config.\
=-=-=-=-=-=-=-=-=-=-=-=-=\
Configuration File: ../../etc/plugins-example.conf\
No Globals\
+-+-+-+-+-+ Profiles -+-+-+-+-+\
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
*-*-*-*-*-* Devices *-*-*-*-*-*\
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\
-!-!-!-!- Managed Networks -!-!-!-!-\
-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!\
+-+-+-+-+-+ Plugins -+-+-+-+-+\
   ************ Plugin *************\
    Name     : BirdDog\
    Path     : /usr/share/xsupplicant/plugins/birddog.so\
   **********************************\
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
=-=-=-=-=-=-=-=-=-=-=-=-=\
Parsed successfully.\
Exiting.\
\
\

\b Configuration file Writing:\

\b0 \
And the following directory for writing:\
\
xsupplicant/lib/libxsupconfwrite\
\

\b Testing your newly added configuration options.
\b0 \
\
Additionally, you can use the config-parser tool located in:\
\
xsupplicant/tools/config-parser\
\
to test reading/writing of your configuration.\
\

\b Document your Configuration File Options:\

\b0 \
If you decide to provide a patch back to the Open1X group for your new configuration options, please provide an example configuration that we can add to the xsupplicant/etc directory so that others can see how to use your configuration options.\
\
\

\b Appendix A:\

\b0 \

\b xsupconfig_parse_plugins.h:\

\b0 \
/**\
 *\
 * Licensed under a dual GPL/BSD license.   (See LICENSE file for more info.)\
 *\
 * \\file xsupconfig_parse_plugins.h\
 *\
 * \\author galimorerpg@users.sourceforge.net\
 *\
 **/\
\
#ifndef __XSUPCONFIG_PARSE_PLUGINS_H__\
#define __XSUPCONFIG_PARSE_PLUGINS_H__\
\
extern parser plugins[];\
\
void *xsupconfig_parse_plugins(void **, xmlNodePtr);\
\
#endif // __XSUPCONFIG_PARSE_PLUGINS_H__\
\

\b xsupconfig_parse_plugins.c:\

\b0 \
/**\
 * Licensed under a dual GPL/BSD license.  (See LICENSE file for more info.)\
 *\
 * \\file xsupconfig_parse_plugins.c\
 *\
 * \\author galimorerpg@users.sourceforge.net\
 *\
 **/\
\
#include <stdio.h>\
\
#ifndef WINDOWS\
#include <stdint.h>\
#endif\
\
#include <libxml/parser.h>\
#include <libxml/tree.h>\
#include <string.h>\
\
#include "xsupconfig_structs.h"\
#include "src/xsup_common.h"\
#include "xsupconfig_parse.h"\
#include "xsupconfig.h"\
#include "xsupconfig_vars.h"\
#include "xsupconfig_common.h"\
#include "xsupconfig_parse_plugin.h"\
\
/**\
 * Stub to allow the parser to be more logical.\
 **/\
void *xsupconfig_parse_plugins(void **attr, xmlNodePtr node)\
\{\
#ifdef PARSE_DEBUG\
	printf("Parsing plugins..\\n");\
#endif\
\
	conf_plugins = NULL;\
\
	return (*attr);\
\}\
\
parser plugins[] = \{\
	\{"Plugin", (struct conf_parse_struct *)&plugin, TRUE, xsupconfig_parse_plugin\},\
	\{NULL, NULL, FALSE, NULL\}\};\
\
\

\b xsupconfig_parse_plugin.h:\

\b0 \
/**\
 *\
 * Licensed under a dual GPL/BSD license.   (See LICENSE file for more info.)\
 *\
 * \\file xsupconfig_parse_plugin.h\
 *\
 * \\author galimorerpg@users.sourceforge.net\
 *\
 **/\
\
#ifndef __XSUPCONFIG_PARSE_PLUGIN_H__\
#define __XSUPCONFIG_PARSE_PLUGIN_H__\
\
extern parser plugin[];\
\
void *xsupconfig_parse_plugin(void **, xmlNodePtr);\
\
#endif // __XSUPCONFIG_PARSE_PLUGIN_H__\
\

\b xsupconfig_parse_plugin.c:\

\b0 \
/**\
 * Licensed under a dual GPL/BSD license.  (See LICENSE file for more info.)\
 *\
 * \\file xsupconfig_parse_plugin.c\
 *\
 * \\author galimorerpg@users.sourceforge.net\
 *\
 * $Id: xsupconfig_parse_plugin.c,v 1.3 2007/10/20 08:10:13 galimorerpg Exp $\
 * $Date: 2007/10/20 08:10:13 $\
 **/\
\
#include <stdio.h>\
\
#ifndef WINDOWS\
#include <stdint.h>\
#endif\
\
#include <libxml/parser.h>\
#include <libxml/tree.h>\
#include <string.h>\
\
#include "xsupconfig_structs.h"\
#include "src/xsup_common.h"\
#include "xsupconfig_parse.h"\
#include "xsupconfig.h"\
#include "xsupconfig_vars.h"\
#include "xsupconfig_common.h"\
#include "xsupconfig_defaults.h"\
#include "xsupconfig_parse_eap.h"\
\
void *xsupconfig_parse_plugin(void **attr, xmlNodePtr node)\
\{\
	struct config_plugins *cur;\
\
#if PARSE_DEBUG\
  printf("Parse a plugin..\\n");\
#endif\
\
	if (conf_plugins == NULL)\
	\{\
		if (xsupconfig_defaults_create_plugin(&conf_plugins) != 0)\
		\{\
			printf("Couldn't allocate memory to store configuration plugins!\\n");\
			return NULL;\
		\}\
\
		cur = conf_plugins;\
	\}\
	else\
	\{\
		cur = conf_plugins;\
\
		while (cur->next != NULL) cur = cur->next;\
\
		if (xsupconfig_defaults_create_plugin(&cur->next) != 0)\
		\{\
			printf("Couldn't allocate memory to store additional configuration plugins!\\n");\
			return NULL;\
		\}\
\
		cur = cur->next;\
	\}\
\
	return cur;\
\}\
\
\
void *xsupconfig_parse_plugin_name(void **attr, xmlNodePtr node)\
\{\
  struct config_plugins *cur = NULL;\
  struct config_plugins *check = NULL;\
  char *value = NULL;\
  char *original = NULL;\
  char *newname = NULL;\
  int done = 0, len = 0;\
\
  value = (char *)xmlNodeGetContent(node);\
\
#ifdef PARSE_DEBUG\
  printf("Name = %s\\n", value);\
#endif\
\
  cur = (*attr);\
\
	if (xsup_common_in_startup() == TRUE)\
	\{\
	  original = _strdup(value);\
\
	  while (done == 0)\
	  \{\
		  check = conf_plugins;\
		  if (check != NULL)\
			\{\
			  // Make sure we don't already have it.\
			  while (check != NULL)\
			  \{\
				  if (check->name != NULL)\
				  \{\
					  if (strcmp(check->name, value) == 0) break;\
				  \}	\
\
				  check = check->next;\
			  \}\
\
			  if (check != NULL)\
			  \{\
				  if (newname != NULL)\
				  \{\
					  free(newname);\
					  newname = NULL;\
				  \}\
\
				  len = strlen(value) + strlen(" (dup)") + 1;\
				  newname = malloc(strlen(value) + strlen(" (dup)") + 1);\
				  if (newname == NULL)\
				  \{\
					 xsupconfig_common_log("Couldn't allocate memory to store duplicate plugin!\\n");\
				  \}\
				  else\
				  \{\
					  memset(newname, 0x00, len);\
					  strcpy(newname, value);\
					  strcat(newname, " (dup)");\
\
					  // Then, replace value.\
					  free(value);\
					  value = newname;\
					  newname = NULL;\
				  \}\
			  \}\
			  else\
			  \{\
				  // We have a valid name.\
				  done = 1;\
			  \}\
		  \}\
		  else\
		  \{\
			  // There is nothing to check, so it must be legit.\
			  done = 1;\
		  \}\
	\}\
\
	  if (strcmp(original, value) != 0)\
	  \{\
		  xsupconfig_common_log("There was a duplicate plugin named '%s'.  The duplicate has been renamed '%s'.", original, value);\
	  \}\
\
	  free(original);\
	\}\
	if ((value == NULL) || (strlen(value) == 0))\
	\{\
		free(value);\
		cur->name = NULL;\
	\}\
	else\
	\{\
		cur->name = value;\
	\}\
\
  return cur;\
\}\
\
void *xsupconfig_parse_plugin_path(void **attr, xmlNodePtr node)\
\{\
  struct config_plugins *cur;\
  char *value;\
\
  value = (char *)xmlNodeGetContent(node);\
\
#ifdef PARSE_DEBUG\
  printf("Path = %s\\n", value);\
#endif\
\
  cur = (*attr);\
\
	if ((value == NULL) || (strlen(value) == 0))\
	\{\
		free(value);\
		cur->path = NULL;\
	\}\
	else\
	\{\
		cur->path = value;\
	\}\
\
  return cur;\
\}\
\
parser plugin[] = \{\
	\{"Name", NULL, FALSE, xsupconfig_parse_plugin_name\},\
	\{"Path", NULL, FALSE, xsupconfig_parse_plugin_path\},\
	\{NULL, NULL, FALSE, NULL\}\};}